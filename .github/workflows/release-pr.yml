name: "Release Automation"

on:
  workflow_run:
    workflows: ["Main CI Pipeline"]
    branches: [main]
    types: [completed]

env:
  RELEASE_CONTEXT: release-automation

jobs:
  release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: "Release Manager"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      statuses: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup environment
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          gh auth setup-git
          gh config set prompt disabled

      - name: Determine version
        id: version
        run: |
          if [ -z "$(git tag -l)" ]; then
            echo "new_version=0.0.0" >> $GITHUB_OUTPUT
            echo "new_tag=v0.0.0" >> $GITHUB_OUTPUT
            echo "is_initial_release=true" >> $GITHUB_OUTPUT
          else
            LATEST_TAG=$(git describe --tags --abbrev=0)
            IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST_TAG#v}"
            NEW_VERSION="${MAJOR}.$((MINOR+1)).0"
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "new_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "is_initial_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Verify tag doesn't exist
        id: check-tag
        run: |
          if git show-ref --tags "${{ steps.version.outputs.new_tag }}"; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            echo "::warning::Tag ${{ steps.version.outputs.new_tag }} already exists"
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create release branch
        if: steps.check-tag.outputs.tag_exists == 'false'
        run: |
          RELEASE_BRANCH="release/${{ steps.version.outputs.new_tag }}"
          git checkout -b $RELEASE_BRANCH
          git push origin $RELEASE_BRANCH
          echo "Created release branch: $RELEASE_BRANCH"

      - name: Create and push tag
        if: steps.check-tag.outputs.tag_exists == 'false'
        run: |
          TAG="${{ steps.version.outputs.new_tag }}"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"

          # Verify tag exists
          for i in {1..5}; do
            git fetch --tags --force
            if git show-ref --tags "$TAG"; then
              echo "Tag verified successfully"
              break
            fi
            echo "Waiting for tag to be available... ($i/5)"
            sleep 3
          done

          if ! git show-ref --tags "$TAG"; then
            echo "::error::Tag $TAG not found after push"
            exit 1
          fi

      - name: Generate changelog
        id: changelog
        run: |
          echo "# Release ${{ steps.version.outputs.new_tag }} ($(date +%Y-%m-%d))" > CHANGELOG.md
          echo "" >> CHANGELOG.md

          if [[ "${{ steps.version.outputs.is_initial_release }}" == 'true' ]]; then
            echo "## Initial Release" >> CHANGELOG.md
            echo "- First stable version" >> CHANGELOG.md
          else
            PREV_TAG=$(git describe --tags --abbrev=0 ${{ steps.version.outputs.new_tag }}^ 2>/dev/null || echo "")

            if [ -z "$PREV_TAG" ]; then
              echo "## All Changes" >> CHANGELOG.md
              git log --pretty=format:"- %s (%h) [%an]" --no-merges >> CHANGELOG.md
            else
              echo "## Changes since $PREV_TAG" >> CHANGELOG.md
              echo "" >> CHANGELOG.md
              echo "### Features" >> CHANGELOG.md
              git log "$PREV_TAG..HEAD" --grep="^feat" --pretty=format:"- %s (%h) [%an]" --no-merges >> CHANGELOG.md || echo "- No new features" >> CHANGELOG.md
              echo "" >> CHANGELOG.md
              echo "### Fixes" >> CHANGELOG.md
              git log "$PREV_TAG..HEAD" --grep="^fix" --pretty=format:"- %s (%h) [%an]" --no-merges >> CHANGELOG.md || echo "- No bug fixes" >> CHANGELOG.md
            fi
          fi

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.new_tag }}
          name: Release ${{ steps.version.outputs.new_tag }}
          body_path: CHANGELOG.md
          generate_release_notes: true
          draft: false
          prerelease: false

      - name: Ensure labels exist
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github.v3+json" \
            /repos/${{ github.repository }}/labels \
            -f name='automated' -f color='0E8A16' -f description='Automated process' || true

          gh api \
            --method POST \
            -H "Accept: application/vnd.github.v3+json" \
            /repos/${{ github.repository }}/labels \
            -f name='version-bump' -f color='5319E7' -f description='Version bump changes' || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare version bump
        id: version-bump
        run: |
          # Calculate next version
          if [[ "${{ steps.version.outputs.is_initial_release }}" == 'true' ]]; then
            NEXT_VERSION="0.1.0-SNAPSHOT"
          else
            LATEST_TAG=$(git describe --tags --abbrev=0)
            IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST_TAG#v}"
            NEXT_VERSION="${MAJOR}.$((MINOR+1)).0-SNAPSHOT"
          fi

          # Create version bump branch
          git checkout main
          git pull origin main
          git checkout -b "version-bump/$NEXT_VERSION"

          # Update version (Maven example)
          mvn versions:set -DnewVersion=$NEXT_VERSION -DgenerateBackupPoms=false

          # Commit changes
          git add pom.xml
          git commit -m "chore: bump version to $NEXT_VERSION [skip ci]"
          git push origin "version-bump/$NEXT_VERSION"

          # Create PR using GitHub API
          PR_RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls" \
            -d '{
              "title": "Version bump to '"$NEXT_VERSION"'",
              "head": "version-bump/'"$NEXT_VERSION"'",
              "base": "main",
              "body": "Automated version bump after release '"${{ steps.version.outputs.new_tag }}"'",
              "maintainer_can_modify": true
            }')

          if echo "$PR_RESPONSE" | grep -q '"message":'; then
            echo "::error::Failed to create PR: $PR_RESPONSE"
            exit 1
          else
            PR_NUMBER=$(echo "$PR_RESPONSE" | jq -r '.number')
            echo "Created PR #$PR_NUMBER"

            # Add labels
            curl -s -X POST \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/labels" \
              -d '{"labels":["automated","version-bump"]}' || \
              echo "::warning::Failed to add labels"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup branches
        if: always()
        run: |
          # Delete release branch if created
          if [[ "${{ steps.check-tag.outputs.tag_exists }}" == 'false' ]]; then
            git push origin --delete "release/${{ steps.version.outputs.new_tag }}" || \
            echo "Release branch already deleted"
          fi
