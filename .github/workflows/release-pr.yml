name: "ðŸš€ Release Automation"

on:
  workflow_run:
    workflows: ["ðŸš€ Main CI Pipeline"]
    branches: [main]
    types: [completed]

jobs:
  release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: "Release Manager"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      statuses: write
      checks: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.workflow_run.head_sha }}
          fetch-depth: 0

      - name: List existing tags
        run: git tag -l

      - name: Determine version
        id: version
        run: |
          if [ -z "$(git tag -l)" ]; then
            echo "new_version=0.0.0" >> $GITHUB_OUTPUT
            echo "new_tag=v0.0.0" >> $GITHUB_OUTPUT
            echo "is_initial_release=true" >> $GITHUB_OUTPUT
          else
            LATEST_TAG=$(git describe --tags --abbrev=0)
            IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST_TAG#v}"
            NEW_VERSION="${MAJOR}.$((MINOR+1)).0"
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "new_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "is_initial_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Start release process
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ github.event.workflow_run.head_sha }}',
              state: 'pending',
              context: 'ðŸš€ Release Automation',
              description: 'Release process initializing'
            })

      # Only update POM for non-initial releases
      - name: Update project version
        if: ${{ steps.version.outputs.is_initial_release != 'true' }}
        run: |
          echo "Updating pom.xml to ${{ steps.version.outputs.new_version }}"
          mvn versions:set -DnewVersion=${{ steps.version.outputs.new_version }} -DgenerateBackupPoms=false
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add pom.xml
          git commit -m "chore: release ${{ steps.version.outputs.new_tag }} [skip ci]"
          git push origin HEAD:main

      - name: Create release tag
        run: |
          if [[ "${{ steps.version.outputs.is_initial_release }}" == 'true' ]]; then
            TAG="v0.0.0"
            MSG="Initial release"
          else
            TAG="${{ steps.version.outputs.new_tag }}"
            MSG="Release $TAG"
          fi

          echo "Creating tag: $TAG"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a $TAG -m "$MSG"
          git push origin $TAG

          # Verify tag exists
          sleep 3
          git ls-remote --tags origin $TAG

      - name: Generate changelog
        if: ${{ steps.version.outputs.is_initial_release != 'true' }}
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 ${{ steps.version.outputs.new_tag }}^)
          echo "# Changes since $PREV_TAG" > CHANGELOG.md
          git log $PREV_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges >> CHANGELOG.md

      - name: Publish release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.new_tag }}
          name: "Release ${{ steps.version.outputs.new_tag }}"
          body_path: CHANGELOG.md
          generate_release_notes: true
          draft: false
          prerelease: false

      - name: Report completion
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ github.event.workflow_run.head_sha }}',
              state: 'success',
              context: 'ðŸš€ Release Automation',
              description: 'Release ${{ steps.version.outputs.new_tag }} completed'
            })
