name: "Release Automation"

on:
  workflow_run:
    workflows: ["Main CI Pipeline"]
    branches: [main]
    types: [completed]

env:
  RELEASE_CONTEXT: release-automation

jobs:
  release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: "Release Manager"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine version
        id: version
        run: |
          if [ -z "$(git tag -l)" ]; then
            echo "new_version=0.0.0" >> $GITHUB_OUTPUT
            echo "new_tag=v0.0.0" >> $GITHUB_OUTPUT
            echo "is_initial_release=true" >> $GITHUB_OUTPUT
          else
            LATEST_TAG=$(git describe --tags --abbrev=0)
            IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST_TAG#v}"
            NEW_VERSION="${MAJOR}.$((MINOR+1)).0"
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "new_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "is_initial_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Verify tag doesn't exist
        id: check-tag
        run: |
          if git show-ref --tags "${{ steps.version.outputs.new_tag }}"; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            echo "::warning::Tag ${{ steps.version.outputs.new_tag }} already exists"
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create release branch
        if: steps.check-tag.outputs.tag_exists == 'false'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          RELEASE_BRANCH="release/${{ steps.version.outputs.new_tag }}"
          git checkout -b $RELEASE_BRANCH
          git push origin $RELEASE_BRANCH
          echo "Created release branch: $RELEASE_BRANCH"

      - name: Create and push tag
        if: steps.check-tag.outputs.tag_exists == 'false'
        run: |
          TAG="${{ steps.version.outputs.new_tag }}"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"
          echo "Pushed tag: $TAG"

          # Wait for tag to be fully available
          sleep 5
          git fetch --tags --force
          if ! git show-ref --tags "$TAG"; then
            echo "::error::Tag $TAG not found after push"
            exit 1
          fi

      - name: Generate changelog
        id: changelog
        run: |
          if [[ "${{ steps.version.outputs.is_initial_release }}" == 'true' ]]; then
            echo "# Initial Release ${{ steps.version.outputs.new_tag }}" > CHANGELOG.md
            echo "First stable release" >> CHANGELOG.md
          else
            PREV_TAG=$(git describe --tags --abbrev=0 ${{ steps.version.outputs.new_tag }}^ 2>/dev/null || echo "")
            echo "# Changes since ${PREV_TAG:-beginning}" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "## Commits" >> CHANGELOG.md
            git log ${PREV_TAG:+$PREV_TAG..}HEAD --pretty=format:"- %s (%h) [%an]" --no-merges >> CHANGELOG.md
          fi
          echo "CHANGELOG.md generated"

      - name: Create GitHub release
        id: create-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.new_tag }}
          name: Release ${{ steps.version.outputs.new_tag }}
          body_path: CHANGELOG.md
          generate_release_notes: true
          draft: false
          prerelease: false
          fail_on_unmatched: false  # Continue if tag doesn't exist
        continue-on-error: true

      - name: Verify release creation
        if: steps.create-release.outcome != 'success'
        run: |
          # Check if release exists via API
          RELEASE_EXISTS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.version.outputs.new_tag }}" \
            | jq -e '.id' >/dev/null 2>&1 && echo "true" || echo "false")

          if [[ "$RELEASE_EXISTS" == "false" ]]; then
            echo "::error::Failed to create release for ${{ steps.version.outputs.new_tag }}"
            exit 1
          else
            echo "::notice::Release already exists for ${{ steps.version.outputs.new_tag }}"
          fi

      - name: Bump version on main
        run: |
          git checkout main
          git pull origin main

          if [[ "${{ steps.version.outputs.is_initial_release }}" == 'true' ]]; then
            NEXT_VERSION="0.1.0-SNAPSHOT"
          else
            LATEST_TAG=$(git describe --tags --abbrev=0)
            IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST_TAG#v}"
            NEXT_VERSION="${MAJOR}.$((MINOR+1)).0-SNAPSHOT"
          fi

          mvn versions:set -DnewVersion=$NEXT_VERSION -DgenerateBackupPoms=false
          git add pom.xml
          git commit -m "chore: bump version to $NEXT_VERSION [skip ci]"
          git push origin main

      - name: Cleanup release branch
        if: always() && steps.check-tag.outputs.tag_exists == 'false'
        run: |
          git push origin --delete "release/${{ steps.version.outputs.new_tag }}" || echo "Branch already deleted"
