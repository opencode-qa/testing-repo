name: "Release Automation"

on:
  workflow_run:
    workflows: ["Main CI Pipeline"]
    branches: [main]
    types: [completed]

env:
  RELEASE_CONTEXT: release-automation

jobs:
  release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: "Release Manager"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for git history
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine version
        id: version
        run: |
          if [ -z "$(git tag -l)" ]; then
            echo "new_version=0.0.0" >> $GITHUB_OUTPUT
            echo "new_tag=v0.0.0" >> $GITHUB_OUTPUT
            echo "is_initial_release=true" >> $GITHUB_OUTPUT
          else
            LATEST_TAG=$(git describe --tags --abbrev=0)
            IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST_TAG#v}"
            NEW_VERSION="${MAJOR}.$((MINOR+1)).0"
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "new_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "is_initial_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Create release branch
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          RELEASE_BRANCH="release/${{ steps.version.outputs.new_tag }}"
          git checkout -b $RELEASE_BRANCH
          git push origin $RELEASE_BRANCH
          echo "Release branch created: $RELEASE_BRANCH"

      - name: Generate comprehensive changelog
        id: changelog
        run: |
          echo "# Release ${{ steps.version.outputs.new_tag }}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## 📅 Release Date" >> CHANGELOG.md
          echo "$(date +'%Y-%m-%d %H:%M:%S')" >> CHANGELOG.md
          echo "" >> CHANGELOG.md

          if [[ "${{ steps.version.outputs.is_initial_release }}" == 'true' ]]; then
            echo "## 🎉 Initial Release" >> CHANGELOG.md
            echo "First stable release of the project" >> CHANGELOG.md
          else
            PREV_TAG=$(git describe --tags --abbrev=0 ${{ steps.version.outputs.new_tag }}^ 2>/dev/null || echo "")

            if [ -z "$PREV_TAG" ]; then
              echo "## 📜 Full Commit History" >> CHANGELOG.md
              git log --pretty=format:"- %s (%h) [%an]" >> CHANGELOG.md
            else
              echo "## 🆕 New Features" >> CHANGELOG.md
              git log "$PREV_TAG..HEAD" --grep="^feat" --pretty=format:"- %s (%h) [%an]" --no-merges >> CHANGELOG.md || echo "- No new features" >> CHANGELOG.md

              echo "" >> CHANGELOG.md
              echo "## 🐛 Bug Fixes" >> CHANGELOG.md
              git log "$PREV_TAG..HEAD" --grep="^fix" --pretty=format:"- %s (%h) [%an]" --no-merges >> CHANGELOG.md || echo "- No bug fixes" >> CHANGELOG.md

              echo "" >> CHANGELOG.md
              echo "## 🔧 Maintenance" >> CHANGELOG.md
              git log "$PREV_TAG..HEAD" --grep="^chore" --pretty=format:"- %s (%h) [%an]" --no-merges >> CHANGELOG.md || echo "- No maintenance changes" >> CHANGELOG.md
            fi
          fi

          # Add footer
          echo "" >> CHANGELOG.md
          echo "---" >> CHANGELOG.md
          echo "Generated automatically by GitHub Actions" >> CHANGELOG.md

      - name: Create release tag
        run: |
          TAG="${{ steps.version.outputs.new_tag }}"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"
          echo "Created tag: $TAG"

      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.new_tag }}
          name: Release ${{ steps.version.outputs.new_tag }}
          body_path: CHANGELOG.md
          generate_release_notes: true
          draft: false
          prerelease: false
          discussion_category_name: "Releases"

      - name: Prepare version bump
        run: |
          # Switch back to main branch
          git checkout main
          git pull origin main

          # Calculate next dev version
          if [[ "${{ steps.version.outputs.is_initial_release }}" == 'true' ]]; then
            NEXT_VERSION="0.1.0-SNAPSHOT"
          else
            LATEST_TAG=$(git describe --tags --abbrev=0)
            IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST_TAG#v}"
            NEXT_VERSION="${MAJOR}.$((MINOR+1)).0-SNAPSHOT"
          fi

          # Update version in pom.xml (or other version files)
          mvn versions:set -DnewVersion=$NEXT_VERSION -DgenerateBackupPoms=false

          # Create version bump commit
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add pom.xml
          git commit -m "chore: bump version to $NEXT_VERSION [skip ci]"
          git push origin main
          echo "Version bumped to $NEXT_VERSION on main branch"

      - name: Cleanup release branch
        run: |
          RELEASE_BRANCH="release/${{ steps.version.outputs.new_tag }}"
          git push origin --delete $RELEASE_BRANCH || echo "Branch $RELEASE_BRANCH already deleted"
          echo "Cleaned up release branch"
