name: "Release Automation"

permissions:
  contents: write
  pull-requests: write

on:
  workflow_run:
    workflows: ["Main CI Pipeline"]
    branches: [main]
    types: [completed]

env:
  RELEASE_CONTEXT: release-automation

jobs:
  release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: "Release Manager"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.workflow_run.head_sha }}
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ -z "$(git tag -l)" ]; then
            echo "new_version=0.0.0" >> $GITHUB_OUTPUT
            echo "new_tag=v0.0.0" >> $GITHUB_OUTPUT
            echo "is_initial_release=true" >> $GITHUB_OUTPUT
          else
            LATEST_TAG=$(git describe --tags --abbrev=0)
            IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST_TAG#v}"
            NEW_VERSION="${MAJOR}.$((MINOR+1)).0"
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "new_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "is_initial_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Create release branch
        run: |
          RELEASE_BRANCH="release/${{ steps.version.outputs.new_tag }}"
          git checkout -b $RELEASE_BRANCH
          git push origin $RELEASE_BRANCH
          echo "Created release branch: $RELEASE_BRANCH"

      - name: Create release tag
        run: |
          TAG="${{ steps.version.outputs.new_tag }}"
          MSG="Release $TAG"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "$TAG" -m "$MSG"
          git push origin "$TAG"

      - name: Generate changelog
        if: ${{ steps.version.outputs.is_initial_release != 'true' }}
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 ${{ steps.version.outputs.new_tag }}^ 2>/dev/null || echo "")
          # Your existing changelog generation logic here
          echo "CHANGELOG.md generated"

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.new_tag }}
          name: Release ${{ steps.version.outputs.new_tag }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false

      - name: Bump version and prepare merge
        run: |
          # Calculate next version
          if [[ "${{ steps.version.outputs.is_initial_release }}" == 'true' ]]; then
            NEXT_VERSION="0.1.0-SNAPSHOT"
          else
            LATEST_TAG=$(git describe --tags --abbrev=0)
            IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST_TAG#v}"
            NEXT_VERSION="${MAJOR}.$((MINOR+1)).0-SNAPSHOT"
          fi

          # Checkout main branch
          git fetch origin main
          git checkout main

          # Bump version
          mvn versions:set -DnewVersion=$NEXT_VERSION -DgenerateBackupPoms=false

          # Commit and push to new branch
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout -b version-bump-$NEXT_VERSION
          git add pom.xml
          git commit -m "chore: bump to $NEXT_VERSION [skip ci]"
          git push origin version-bump-$NEXT_VERSION

      - name: Create and merge PR
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: version-bump-${{ steps.version.outputs.new_version }}
          base: main
          title: "Version bump to ${{ steps.version.outputs.new_version }}"
          body: "Automated version bump after release ${{ steps.version.outputs.new_tag }}"
          commit-message: "chore: version bump [skip ci]"
          delete-branch: true
          merge-method: squash
          labels: automated,release
